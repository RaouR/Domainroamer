I want create a new project to build a domain registar optimizer where users can login and compare prices for buying and renewing their domains, I have a plan of what I want that I will add below.
The Problem

Registrar price creep

Domain registrars (GoDaddy, Namecheap, Cloudflare, Google Domains before it was sold to Squarespace, Porkbun, etc.) often quietly increase renewal prices over time — sometimes per year, sometimes after an intro promo expires.

Example: .com renewals might start at $9.99 but go up to $14.99 or even $19.99 after the first year.

TLD price differences

Different registrars charge wildly different prices for the same TLD.
Example: .io might be $32 at one registrar and $60+ at another.

Hidden ICANN fees and “extras”

Some registrars hide fees until checkout.

Privacy protection might be free at one place, $4/year at another.

Portfolio sprawl

Many people own domains across multiple registrars (often due to chasing promotions).

This makes it hard to see the “total cost” of ownership and whether you should consolidate to save money.

The Opportunity

If you own more than a few domains, you can often save hundreds per year by transferring to registrars with better base prices, better bulk pricing, or permanent free WHOIS privacy.

Right now, this is manual work:

You have to log into each registrar

Check renewal dates & prices

Compare to alternative registrars for the same TLD

Calculate transfer cost savings

Nobody likes doing that.

The Planned Solution: Registrar Optimizer

A tool that:

Imports your domain list automatically

Via registrar APIs (Namecheap API, GoDaddy API, Cloudflare API, etc.)

Or by letting you upload a CSV of your domains & renewal dates

Fetches current renewal prices for your TLDs across major registrars

From public pricing pages (scraping/API)

Stores ICANN fees and WHOIS privacy costs for accuracy

Calculates potential savings

Compares what you pay now vs. cheapest alternative (factoring transfer fee, which usually adds 1 year of registration)

Shows per-domain savings and total annual savings

Shows you the “switch plan”

“Transfer mydomain.io from Namecheap to Porkbun → Save $12/year”

“Renew mydomain.com early at Cloudflare → Save $4/year vs. GoDaddy”

Optional alerts

Warn you when a registrar hikes a price before your renewal date

Suggest batch transfers before a price increase

Example Output
Domain            Current Registrar   Renewal Price   Cheapest Registrar   Price There   Annual Saving
-------------------------------------------------------------------------------------------------------
mydomain.com      GoDaddy             $17.99          Cloudflare           $9.15         $8.84
coolname.io       Namecheap           $48.88          Porkbun              $32.44        $16.44
sideproject.dev   Google/Squarespace  $14.99          Namecheap            $12.98        $2.01
-------------------------------------------------------------------------------------------------------
Total Annual Savings: $27.29

MVP Build Feasibility

Why this is buildable even solo:

Many registrars have public APIs for listing domains & renewals.

TLD pricing can be scraped or pulled from cached JSON files (some registrars even publish their TLD pricing in bulk).

Start with manual CSV import before doing full API integrations (simpler v1).

The main “logic” is just comparing two price tables and doing subtraction.

Stack Idea (lightweight):

Backend: Python (Flask) or Node.js

Frontend: Basic HTML/JS or a small React/Vue interface

Data Source:

For v1, static JSON of registrar pricing scraped monthly

For v2, live scraping or API calls

Registrar Optimizer roadmap with concrete APIs, data storage ideas, and a realistic build plan.

1. Registrar APIs to Target First

You want popular registrars with easy or free API access so you can cover a large percentage of users early.

Priority	Registrar	API Docs	Notes
1	Namecheap	API docs	Free API key if you have an account. Can list domains, get renewal dates & prices.
2	GoDaddy	API docs	Requires API key (free). Lists domains & expiry dates, but no direct renewal pricing → you may need to scrape pricing.
3	Cloudflare	API docs	Their registrar has wholesale pricing (transparent). Easy to pull domain list.
4	Porkbun	API docs	Simple API. Can fetch domain list, expiry, and renewal prices.
5	Dynadot	API docs	Easy API, similar to Porkbun.
Later	Squarespace Domains (ex-Google)	No public API, would need CSV/manual entry.	

MVP Tip: Start with Namecheap, GoDaddy, Cloudflare — those three alone cover a massive number of domains.

2. How to Store & Update Price Data

You need two sets of data:

User-specific domain info (from APIs or uploads)

TLD pricing tables (per registrar)

a) User domain data table

Table: domains
id (int)
user_id (int)
domain_name (string)
tld (string)
registrar (string)
expiry_date (date)
renewal_price (decimal, nullable)
privacy_cost (decimal, nullable)
last_checked (datetime)


b) Registrar pricing table

Table: registrar_prices
id (int)
registrar (string)
tld (string)
renewal_price (decimal)
privacy_price (decimal)
last_updated (datetime)


Updating pricing data:

Option 1 (MVP): Scrape each registrar’s pricing page once/month and update JSON in your database.

Option 2 (V2): Use their APIs if available (Porkbun, Dynadot, Cloudflare are easiest).

Option 3: Crowdsource — let users optionally share their renewal price after logging in, to help keep the database current.

3. Week-by-Week Build Plan
Week 1 – Core Setup

✅ Set up backend (Flask/FastAPI or Node.js Express).

✅ Create database with domains and registrar_prices tables.

✅ Implement manual CSV upload of domains list (domain_name,expiry_date,registrar,renewal_price).

✅ Create page that shows your domain list with current renewal prices.

Deliverable: Can manually upload domains and see them in a dashboard.

Week 2 – Price Comparison Engine

✅ Add scraper or static JSON for 3 registrars (Cloudflare, Namecheap, Porkbun) renewal prices.

✅ Build function that:

Looks at each domain’s TLD

Finds cheapest renewal price in registrar_prices

Calculates savings

✅ Display per-domain & total savings in a clean table.

Deliverable: Price comparison table works with manual uploads.

Week 3 – API Integrations

✅ Add Namecheap API integration (list domains & expiry dates).

✅ Add GoDaddy API integration (list domains; renewal prices via scrape).

✅ Add Cloudflare API integration (list domains; renewal prices from static JSON).

✅ Store data in domains table, auto-update every 24h via cron.

Deliverable: Can import domains automatically from Namecheap/GoDaddy/Cloudflare accounts.

Week 4 – Polish & Alerts

✅ Add “Transfer Plan” output (CSV/PDF) with:

Domain

Current Registrar

Renewal Price

Cheapest Registrar

Price There

Saving

✅ Add email alert for “Price hike detected” or “Renew soon to save $X”.

✅ Optional: WHOIS lookup for domains not found via API.

Deliverable: MVP ready for your own portfolio + ready to test with beta users.

4. Optional Future Features

Bulk transfer checklist with registrar-specific auth code fetch.

Promo code finder that checks for new TLD discounts.

Portfolio health score (security, DNS redundancy, WHOIS privacy, etc.).

Direct renewal/transfer links to each registrar.

```
the MVP flow diagram for your Registrar Optimizer so you can see exactly how data will move through the system.

Registrar Optimizer MVP Flow
         ┌───────────────────────┐
         │  1. Domain Input       │
         ├───────────────────────┤
         │ A) CSV Upload          │
         │   - domain_name        │
         │   - expiry_date        │
         │   - registrar          │
         │   - renewal_price?     │
         │                        │
         │ B) API Import          │
         │   - Namecheap API      │
         │   - GoDaddy API        │
         │   - Cloudflare API     │
         └──────────┬────────────┘
                    │
                    ▼
      ┌─────────────────────────────┐
      │  2. Store in DB (domains)   │
      ├─────────────────────────────┤
      │ id                          │
      │ user_id                     │
      │ domain_name                 │
      │ tld (.com, .io, etc.)       │
      │ registrar                   │
      │ expiry_date                 │
      │ renewal_price (nullable)    │
      │ privacy_cost (nullable)     │
      │ last_checked                │
      └──────────┬──────────────────┘
                 │
                 ▼
  ┌───────────────────────────────────┐
  │  3. Get Current Pricing Data       │
  ├───────────────────────────────────┤
  │ registrar_prices table:            │
  │   registrar                        │
  │   tld                              │
  │   renewal_price                    │
  │   privacy_price                    │
  │   last_updated                     │
  │                                     │
  │ Source Options:                     │
  │  - API (Cloudflare, Porkbun)        │
  │  - Scraper (Namecheap, GoDaddy)     │
  │  - Static JSON (MVP)                │
  └──────────┬─────────────────────────┘
             │
             ▼
   ┌───────────────────────────────────┐
   │  4. Price Comparison Engine        │
   ├───────────────────────────────────┤
   │ For each domain:                   │
   │   1. Match TLD in registrar_prices │
   │   2. Find cheapest renewal price   │
   │   3. Compare with current price    │
   │   4. Calculate annual savings      │
   │   5. Store recommendation          │
   └──────────┬────────────────────────┘
              │
              ▼
  ┌─────────────────────────────────────┐
  │  5. Results Display                  │
  ├─────────────────────────────────────┤
  │ Domain | Current Registrar | Current │
  │ Price  | Cheapest Registrar| Price   │
  │ Saving | % Saving           │        │
  └──────────┬──────────────────────────┘
              │
              ▼
   ┌────────────────────────────────────┐
   │  6. Export & Alerts                 │
   ├────────────────────────────────────┤
   │ - Export CSV/PDF Transfer Plan      │
   │ - Email “renew soon to save $X”     │
   │ - Alert if registrar hikes price    │
   └────────────────────────────────────┘

Flow Summary

User adds domains via CSV or registrar API.

Data saved in domains table.

System fetches current TLD pricing for multiple registrars into registrar_prices.

Comparison engine finds cheapest option for each domain.

Dashboard shows savings & transfer suggestions.

Optional export and alerts keep user informed.
```